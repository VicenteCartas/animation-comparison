import{S as h}from"./passPostProcess-DNYSObNG.js";import{DDSTools as n}from"./dds-3zbL5Dg4.js";import"./math.vector-BKE3dtFj.js";import"./worker-CzXWj9qb.js";import"./texture-CKGfFkXh.js";import"./instantiationTools-B-U98VWj.js";class S{constructor(){this.supportCascades=!0}loadCubeData(e,a,m,o){const p=a.getEngine();let i,l=!1,t=1e3;if(Array.isArray(e))for(let s=0;s<e.length;s++){const d=e[s];i=n.GetDDSInfo(d),a.width=i.width,a.height=i.height,l=(i.isRGB||i.isLuminance||i.mipmapCount>1)&&a.generateMipMaps,p._unpackFlipY(i.isCompressed),n.UploadDDSLevels(p,a,d,i,l,6,-1,s),!i.isFourCC&&i.mipmapCount===1?p.generateMipMapsForCubemap(a):t=i.mipmapCount-1}else{const s=e;i=n.GetDDSInfo(s),a.width=i.width,a.height=i.height,m&&(i.sphericalPolynomial=new h),l=(i.isRGB||i.isLuminance||i.mipmapCount>1)&&a.generateMipMaps,p._unpackFlipY(i.isCompressed),n.UploadDDSLevels(p,a,s,i,l,6),!i.isFourCC&&i.mipmapCount===1?p.generateMipMapsForCubemap(a,!1):t=i.mipmapCount-1}p._setCubeMapTextureParams(a,l,t),a.isReady=!0,a.onLoadedObservable.notifyObservers(a),a.onLoadedObservable.clear(),o&&o({isDDS:!0,width:a.width,info:i,data:e,texture:a})}loadData(e,a,m){const o=n.GetDDSInfo(e),p=(o.isRGB||o.isLuminance||o.mipmapCount>1)&&a.generateMipMaps&&Math.max(o.width,o.height)>>o.mipmapCount-1===1;m(o.width,o.height,p,o.isFourCC,()=>{n.UploadDDSLevels(a.getEngine(),a,e,o,p,1)})}}export{S as _DDSTextureLoader};
